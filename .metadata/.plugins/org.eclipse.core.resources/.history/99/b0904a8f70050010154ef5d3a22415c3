package com.cts.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.cts.dto.RequestDTO;
import com.cts.dto.ResponseDTO;
import com.cts.exception.InvalidInputException;
import com.cts.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.Valid;


@RestController
@RequestMapping("/register")
@CrossOrigin(origins="http://127.0.0.1:5500")
public class UserController {
	
	@Autowired
	private UserService userService;
	
//	@PostMapping
//	public ResponseDTO createUser(@RequestBody @Valid RequestDTO requestDTO) {
//		if (requestDTO.getFirstName().isBlank() || requestDTO.getLastName().isBlank() || !requestDTO.getEmail().contains("@") || requestDTO.getPassword().isBlank() || requestDTO.getAddress().isBlank() || requestDTO.getContactNumber().isBlank() || requestDTO.getDateOfBirth()==null) {
//            throw new InvalidInputException("Invalid input");
//        }
//		return userService.createUser(requestDTO);
//	}
	@PostMapping(consumes = "multipart/form-data")
	public ResponseEntity<String> registerUser(
	        @RequestPart("user") String userJson,
	        @RequestPart("photo") MultipartFile photo) {
	    try {
	    	
	        ObjectMapper objectMapper = new ObjectMapper();
	        RequestDTO requestDTO = objectMapper.readValue(userJson, RequestDTO.class);

	        if (photo != null && !photo.isEmpty()) {
	            requestDTO.setPhoto(photo.getBytes());
	        } else {
	            return ResponseEntity.badRequest().body("Photo is required.");
	        }
	        userService.createUser(requestDTO);
	        return ResponseEntity.ok("User registered successfully!");

	    } catch (Exception e) {
	        e.printStackTrace();
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Error processing user registration: " + e.getMessage());
	    }
	}

	
	
	@GetMapping
	public List<ResponseDTO> getAllUser(){
		return userService.getAllUsers();
	}
	
}