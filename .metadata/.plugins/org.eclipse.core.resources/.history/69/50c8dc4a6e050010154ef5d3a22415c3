package com.cts.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.dto.RequestDTO;
import com.cts.dto.ResponseDTO;
import com.cts.exception.InvalidInputException;
import com.cts.service.UserService;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import jakarta.validation.Valid;
import org.springframework.http.MediaType;


@RestController
@RequestMapping("/register")
@CrossOrigin(origins="http://127.0.0.1:5500")
public class UserController {
	
	@Autowired
	private UserService userService;
	
//	@PostMapping
//	public ResponseDTO createUser(@RequestBody @Valid RequestDTO requestDTO) {
//		if (requestDTO.getFirstName().isBlank() || requestDTO.getLastName().isBlank() || !requestDTO.getEmail().contains("@") || requestDTO.getPassword().isBlank() || requestDTO.getAddress().isBlank() || requestDTO.getContactNumber().isBlank() || requestDTO.getDateOfBirth()==null) {
//            throw new InvalidInputException("Invalid input");
//        }
//		return userService.createUser(requestDTO);
//	}
//	


	@PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseDTO createUser(
	        @ModelAttribute RequestDTO requestDTO,
	        @RequestPart("photo") MultipartFile photo) {

	    try {
	        // Convert photo to byte[] and set it in DTO
	        if (photo != null && !photo.isEmpty()) {
	            requestDTO.setPhoto(photo.getBytes());
	        }

	        // Call service layer to save the user
	        return userService.createUser(requestDTO);

	    } catch (IOException e) {
	        throw new RuntimeException("Error processing uploaded photo", e);
	    }
	}
	
	
	@GetMapping
	public List<ResponseDTO> getAllUser(){
		return userService.getAllUsers();
	}
	
}