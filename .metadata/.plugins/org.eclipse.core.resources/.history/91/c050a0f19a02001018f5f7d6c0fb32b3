package com.cts.controller;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import com.cts.controller.UserController;
import com.cts.dto.RequestDTO;
import com.cts.dto.ResponseDTO;
import com.cts.enums.UserRole;
import com.cts.service.UserService;

@ExtendWith(MockitoExtension.class)
public class UserControllerTest {

 @Mock
 private UserService userService;

 @InjectMocks
 private UserController userController;

 @BeforeEach
 public void setUp() {
 MockitoAnnotations.openMocks(this);
 }

 @Test
 public void testCreateUser_ValidInput() {
 RequestDTO requestDTO = new RequestDTO("Swagata", "Mondal", "swagata@example.com", "password123", new byte[10240], "Rupsa", "ABC Road", "9876543210", new Date());
 ResponseDTO responseDTO = new ResponseDTO(1, "Swagata", "Mondal", "swagata@example.com", "Rupsa", "ABC Road", "9876543210", new Date(), UserRole.USER, true, true, LocalDateTime.now());

 when(userService.createUser(any(RequestDTO.class))).thenReturn(responseDTO);

 ResponseDTO result = userController.createUser(requestDTO);

 assertEquals(responseDTO, result);
 verify(userService, times(1)).createUser(any(RequestDTO.class));
 }

// @Test
// public void testCreateUser_InvalidInput() {
// RequestDTO requestDTO = new RequestDTO("", "", "invalid-email", "", new byte[0], "", "", "", null);
//
// assertThrows(RuntimeException.class, () -> {
// userController.createUser(requestDTO);
// });
// }

 @Test
 public void testGetAllUsers() {
 List users = Arrays.asList(
 new ResponseDTO(1, "Swagata", "Mondal", "swagata@example.com", "Rupsa", "ABC Road", "9876543210", new Date(), UserRole.USER, true, true, LocalDateTime.now()),
 new ResponseDTO(2, "Jane", "Doe", "jane.doe@example.com", "Janey", "456 Elm St", "0987654321", new Date(), UserRole.USER, true, true, LocalDateTime.now())
 );

 when(userService.getAllUsers()).thenReturn(users);

 List result = userController.getAllUser();

 assertEquals(users, result);
 verify(userService, times(1)).getAllUsers();
 }
}(EXPLAIN ME LINE BY LINE DESCRIPTIVELY)