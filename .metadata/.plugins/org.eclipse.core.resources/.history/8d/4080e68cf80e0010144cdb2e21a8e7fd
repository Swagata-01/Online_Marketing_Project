package com.cts.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import com.cts.dto.RequestDTO;
import com.cts.dto.ResponseDTO;
import com.cts.entity.User;
import com.cts.enums.UserRole;
import com.cts.mapper.UserMapper;
import com.cts.repository.UserRepository;
@ExtendWith(MockitoExtension.class)
public class UserServiceTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCreateUser_ValidInput() {

        RequestDTO requestDTO = new RequestDTO("Swagata", "Mondal", "swagata@example.com", "password123", new byte[10240], "Rupsa", "ABC Road", "9876543210", new Date());
        User user = UserMapper.toEntity(requestDTO);
        User savedUser = User.builder()
                .userID(1)
                .firstName("Swagata")
                .lastName("Mondal")
                .email("swagata@example.com")
                .password("password123")
                .nickName("Rupsa")
                .address("ABC Road")
                .contactNumber("9876543210")
                .dateOfBirth(requestDTO.getDateOfBirth())
                .userRole(UserRole.USER)
                .emailVerification(true)
                .isActive(true)
                .addedOn(LocalDateTime.now())
                .updatedOn(LocalDateTime.now())
                .build();
        ResponseDTO responseDTO = UserMapper.toDTO(savedUser);
        when(userRepository.save(any(User.class))).thenReturn(savedUser);
        ResponseDTO result = userService.createUser(requestDTO);
        assertEquals(responseDTO, result);
    }

    @Test
    public void testCreateUser_InvalidInput() {
        RequestDTO requestDTO = new RequestDTO("", "", "invalid-email", "", new byte[0], "", "", "", null);
        assertThrows(RuntimeException.class, () -> {
            userService.createUser(requestDTO);
        });
    }

    @Test
    public void testGetAllUsers() {
        List<User> users = Arrays.asList(
                User.builder()
                        .userID(1)
                        .firstName("Swagata")
                        .lastName("Mondal")
                        .email("swagata@example.com")
                        .password("password123")
                        .nickName("Rupsa")
                        .address("ABC Road")
                        .contactNumber("9876543210")
                        .dateOfBirth(new Date())
                        .userRole(UserRole.USER)
                        .emailVerification(true)
                        .isActive(true)
                        .addedOn(LocalDateTime.now())
                        .updatedOn(LocalDateTime.now())
                        .build(),
                User.builder()
                        .userID(2)
                        .firstName("Jaya")
                        .lastName("Mondal")
                        .email("jaya@example.com")
                        .password("password123")
                        .nickName("jayaa")
                        .address("DEF Road")
                        .contactNumber("0987654321")
                        .dateOfBirth(new Date())
                        .userRole(UserRole.USER)
                        .emailVerification(true)
                        .isActive(true)
                        .addedOn(LocalDateTime.now())
                        .updatedOn(LocalDateTime.now())
                        .build()
        );

        List<ResponseDTO> responseDTOs = users.stream()
                .map(UserMapper::toDTO)
                .collect(Collectors.toList());

        when(userRepository.findAll()).thenReturn(users);
        List<ResponseDTO> result = userService.getAllUsers();
        assertEquals(responseDTOs, result);
    }
}